{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Chapter5_Feb_6\"\noutput: \n  html_document: \n    keep_md: yes\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n#5.3.1\n\n```{r}\n#NOT use attach \nlibrary (ISLR)\nset.seed (1)\ntrain=sample (392 ,196) #training set, subset 196 samples out of originoal 392 observations.1\n#?sample #Random Samples and Permutations\n```\n\n```{r}\nlm.fit <- lm(mpg~horsepower, data = Auto, subset = train)\nattach (Auto)\nmean((mpg -predict (lm.fit ,Auto))[-train ]^2) # mean() calculate the MSE of the 196 in the validation, -train means all observations that are not in the training set\n#MSE for the linear regression is 26.14 \n```\n\n#poly() function to estimate the test error for the quadratic and cubic regressions.\n```{r}\nlm.fit2=lm(mpg~poly(horsepower ,2) ,data=Auto ,subset =train )\nmean((mpg -predict (lm.fit2 ,Auto))[-train ]^2)\n#19.82\nlm.fit3=lm(mpg~poly(horsepower ,3) ,data=Auto ,subset =train )\nmean((mpg -predict (lm.fit3 ,Auto))[-train ]^2)\n#19.78\n```\n\n#If we choose a different training set instead, then we will obtain somewhat different errors on the validation set.\n\n```{r}\nset.seed (2)\ntrain=sample (392 ,196)\nlm.fit =lm(mpg~horsepower ,subset =train)\nmean((mpg -predict (lm.fit ,Auto))[-train ]^2)\n#23.30\nlm.fit2=lm(mpg~poly(horsepower ,2) ,data=Auto ,subset =train )\nmean((mpg -predict (lm.fit2 ,Auto))[-train ]^2)\n#18.90\nlm.fit3=lm(mpg~poly(horsepower ,3) ,data=Auto ,subset =train )\nmean((mpg -predict (lm.fit3 ,Auto))[-train ]^2)\n#19.26\n```\n\n#5.3.2\n\n```{r}\n#The LOOCV estimate can be automatically computed for any generalized linear model using the glm() and cv.glm() functions.\nglm.fit=glm(mpg~horsepower ,data=Auto)\ncoef(glm.fit)\n#(Intercept ) horsepower\n#39.936 -0.158\n\nlm.fit =lm(mpg~horsepower ,data=Auto)\ncoef(lm.fit)\n#(Intercept ) horsepower\n#39.936 -0.158\n#we will perform linear regression using the glm() function rather than the lm() function because the former can be used together with cv.glm(). \n```\n\n```{r}\nlibrary (boot) #The cv.glm() function is part of the boot library.\nglm.fit=glm(mpg~horsepower ,data=Auto)\ncv.err =cv.glm(Auto ,glm.fit) #This function calculates the estimated K-fold cross-validation prediction error for generalized linear models.\ncv.err$delta\n#1 1\n#24.23 24.23\n#The cv.glm() function produces a list with several components. The two numbers in the delta vector contain the cross-validation results.\n```\n\n```{r}\ncv.error=rep (0,5)\nfor (i in 1:5){\nglm.fit=glm(mpg~poly(horsepower ,i),data=Auto)\ncv.error[i]=cv.glm (Auto ,glm.fit)$delta [1]\n}\ncv.error\n#[1] 24.23 19.25 19.33 19.42 19.03\n```\n\n#5.3.3 k-Fold Cross-Validation\n\n```{r}\nset.seed (17)\ncv.error.10= rep (0 ,10)\nfor (i in 1:10) {\nglm.fit=glm(mpg~poly(horsepower ,i),data=Auto)\ncv.error.10[i]=cv.glm (Auto ,glm.fit ,K=10) $delta [1]\n}\ncv.error.10\n#[1] 24.21 19.19 19.31 19.34 18.88 19.02 18.90 19.71 18.95 19.50\n```\n\n#Problems\n3. We now review k-fold cross-validation.\n(a) Explain how k-fold cross-validation is implemented.\nk-fold cross-validation is implemented by taking the set of n observations and randomly splitting into k non-overlapping groups. Each of these groups acts as a validation set and the remainder as a training set. The test error is estimated by averaging the k resulting MSE estimates.\n(b) What are the advantages and disadvantages of k-fold crossvalidation\nrelative to:\ni. The validation set approach?\nii. LOOCV?\ni. The validation set approach is conceptually simple and easily. the observation can simply partitioning the existing training data into two sets. However, there are two drawbacks: (1.) the estimate of the test error rate can be highly variable depending on which observations are included in the training and validation sets. (2.) the validation set error rate may tend to overestimate the test error rate for the model fit on the entire data set.\n\nii. LOOCV is a special case of k-fold cross-validation with k = n. Thus, LOOCV is the most computationally intense method since the model must be fit n times. Also, LOOCV has higher variance, but lower bias, than k-fold CV.\n\n5. In Chapter 4, we used logistic regression to predict the probability of\ndefault using income and balance on the Default data set. We will\nnow estimate the test error of this logistic regression model using the\nvalidation set approach. Do not forget to set a random seed before\nbeginning your analysis.\n\n(a) Fit a logistic regression model that uses income and balance to\npredict default.\n\n```{r}\nlibrary(ISLR)\nsummary(Default)\nattach(Default)\nset.seed(1)\nglm.fit = glm(default~income+balance, data=Default, family=binomial)\n#use sample.split for spliting data Geoff scripts instead of subset=train\n```\n\n(b) Using the validation set approach, estimate the test error of this\nmodel. In order to do this, you must perform the following steps:\ni. Split the sample set into a training set and a validation set.\nii. Fit a multiple logistic regression model using only the training\nobservations.\niii. Obtain a prediction of default status for each individual in\nthe validation set by computing the posterior probability of\ndefault for that individual, and classifying the individual to\nthe default category if the posterior probability is greater\nthan 0.5.\niv. Compute the validation set error, which is the fraction of\nthe observations in the validation set that are misclassified.\n\n```{r}\nx = function() {\n# i.Split the sample set into a training set and a validation set\ntrain = sample(dim(Default)[1], dim(Default)[1]/2)\n# ii.Fit a multiple logistic regression model using only the training observations.\nglm.fit = glm(default~income+balance, data=Default, family=binomial,\n              subset=train)\n# iii.posterior probability\nglm.pred = rep(\"No\", dim(Default)[1]/2)\nglm.probs = predict(glm.fit, Default[-train,], type=\"response\")\nglm.pred[glm.probs>.5] = \"Yes\"\n# iv.validation\nreturn(mean(glm.pred != Default[-train,]$default))\n}\nx()\n#0.0286\n#2.86% test error rate from validation set approach.\n```\n\n(c) Repeat the process in (b) three times, using three different splits\nof the observations into a training set and a validation set. Comment\non the results obtained.\n\n```{r}\nx() #0.0236\nx() #0.028\nx() #0.0268\n#seems to average around 2.6% test error rate.\n```\n\n(d) Now consider a logistic regression model that predicts the probability\nof default using income, balance, and a dummy variable\nfor student. Estimate the test error for this model using the validation\nset approach. Comment on whether or not including a\ndummy variable for student leads to a reduction in the test error\nrate.\n\n```{r}\ntrain = sample(dim(Default)[1], dim(Default)[1]/2)\nglm.fit = glm(default~income+balance+student, data=Default, family=binomial,subset=train)\nglm.pred = rep(\"No\", dim(Default)[1]/2)\nglm.probs = predict(glm.fit, Default[-train,], type=\"response\")\nglm.pred[glm.probs>.5] = \"Yes\"\nmean(glm.pred != Default[-train,]$default)\n#2.64% test error rate, with student dummy variable. Using the validation set approach, it doesn't appear adding the student dummy variable leads to a reduction in the test error rate.\n```\n\n7. In Sections 5.3.2 and 5.3.3, we saw that the cv.glm() function can be\nused in order to compute the LOOCV test error estimate. Alternatively,\none could compute those quantities using just the glm() and predict.glm() functions, and a for loop. You will now take this approach\nin order to compute the LOOCV error for a simple logistic\nregression model on the Weekly data set. Recall that in the context\nof classification problems, the LOOCV error is given in (5.4).\n\n(a) Fit a logistic regressionmodel that predicts Direction using Lag1\nand Lag2.\n\n```{r}\nlibrary(ISLR)\nsummary(Weekly)\nset.seed(1)\nattach(Weekly)\nglm.fit = glm(Direction~Lag1+Lag2, data=Weekly, family=binomial)\nsummary(glm.fit)\n```\n\n(b) Fit a logistic regressionmodel that predicts Direction using Lag1\nand Lag2 using all but the first observation.\n\n```{r}\nglm.fit = glm(Direction~Lag1+Lag2, data=Weekly[-1,], family=binomial)\nsummary(glm.fit)\n```\n\n(c) Use the model from (b) to predict the direction of the first observation.\nYou can do this by predicting that the first observation\nwill go up if P(Direction=\"Up\"|Lag1, Lag2) > 0.5. Was this observation\ncorrectly classified?\n\n```{r}\npredict.glm(glm.fit, Weekly[1,], type=\"response\") > 0.5\n#TRUE\n#Prediction was Up, true Direction was Down.\n```\n\n(d) Write a for loop from i = 1 to i = n, where n is the number of\nobservations in the data set, that performs each of the following\nsteps:\n\ni. Fit a logistic regression model using all but the ith observation\nto predict Direction using Lag1 and Lag2.\nii. Compute the posterior probability of the market moving up\nfor the ith observation.\niii. Use the posterior probability for the ith observation in order\nto predict whether or not the market moves up.\niv. Determine whether or not an error was made in predicting\nthe direction for the ith observation. If an error was made,\nthen indicate this as a 1, and otherwise indicate it as a 0.\n\n```{r}\ny = rep(0, dim(Weekly)[1])\nfor (i in 1:(dim(Weekly)[1])) {\n   glm.fit = glm(Direction~Lag1+Lag2, data=Weekly[-i,], family=binomial)\n   is_up = predict.glm(glm.fit, Weekly[i,], type=\"response\") > 0.5\n   is_true_up = Weekly[i,]$Direction == \"Up\"\n   if (is_up != is_true_up)\n     y[i] = 1\n}\nsum(y)\n#490 errors.\n```\n\n(e) Take the average of the n numbers obtained in (d)iv in order to\nobtain the LOOCV estimate for the test error. Comment on the\nresults.\n\n```{r}\nmean(y)\n#[1] 0.4499541\n#LOOCV estimates a test error rate of ~45%.\n```\n\n8.We will now perform cross-validation on a simulated data set.\n(a) Generate a simulated data set as follows:\n\n```{r}\nset.seed (1)\nx=rnorm (100)\ny=x-2* x^2+ rnorm (100)\n```\nIn this data set, what is n and what is p? Write out the model\nused to generate the data in equation form.\n\nn = 100, p = 2.\nY = X - 2 X^2 + e\n\n(b) Create a scatterplot of X against Y . Comment on what you find.\n\n```{r}\nplot(x,y)\n#Quadratic plot. x from about -2 to 2. y from about -8 to 2.\n```\n\n(c) Set a random seed, and then compute the LOOCV errors that\nresult from fitting the following four models using least squares:\n\ni. Y = β0 + β1X + e\nii. Y = β0 + β1X + β2X2 + e\niii. Y = β0 + β1X + β2X2 + β3X3 + e\niv. Y = β0 + β1X + β2X2 + β3X3 + β4X4 + e.\n\nNote you may find it helpful to use the data.frame() function\nto create a single data set containing both X and Y .\n\n```{r}\nlibrary(boot)\nData = data.frame(x,y)\nset.seed(1)\n# i.\nglm.fit = glm(y~x)\ncv.glm(Data, glm.fit)$delta\n#[1] 7.288162 7.284744\n# ii.\nglm.fit = glm(y~poly(x,2))\ncv.glm(Data, glm.fit)$delta\n#[1] 0.9374236 0.9371789\n# iii.\nglm.fit = glm(y~poly(x,3))\ncv.glm(Data, glm.fit)$delta\n#[1] 0.9566218 0.9562538\n# iv.\nglm.fit = glm(y~poly(x,4))\ncv.glm(Data, glm.fit)$delta\n#[1] 0.9539049 0.9534453\n```\n\n(d) Repeat (c) using another random seed, and report your results.\nAre your results the same as what you got in (c)? Why?\n\n```{r}\nset.seed(10)\n# i.\nglm.fit = glm(y~x)\ncv.glm(Data, glm.fit)$delta\n#[1] 7.288162 7.284744\n# ii.\nglm.fit = glm(y~poly(x,2))\ncv.glm(Data, glm.fit)$delta\n# iii.\nglm.fit = glm(y~poly(x,3))\ncv.glm(Data, glm.fit)$delta\n#[1] 0.9566218 0.9562538\n# iv.\nglm.fit = glm(y~poly(x,4))\ncv.glm(Data, glm.fit)$delta\n#[1] 0.9539049 0.9534453\n#they are the same, because LOOCV will be the same since it evaluates n folds of a single observation.\n```\n\n(e) Which of the models in (c) had the smallest LOOCV error? Is\nthis what you expected? Explain your answer.\n\nThe quadratic polynomial had the lowest LOOCV test error rate. This was expected because it matches the true form of Y\n\n(f) Comment on the statistical significance of the coefficient estimates\nthat results from fitting each of the models in (c) using\nleast squares. Do these results agree with the conclusions drawn\nbased on the cross-validation results?\n\n\n\n```{r}\nsummary(glm.fit)\n#p-values show statistical significance of linear and quadratic terms, agrees with the CV result\n```\n\n",
    "created" : 1517800588528.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "247799939",
    "id" : "9E8370C0",
    "lastKnownWriteTime" : 1517946861,
    "last_content_update" : 1517946861029,
    "path" : "~/Documents/UCD-pbio-rclub/ISLR_Hajar.Amini/Chapter5_Feb_6/Chapter5_Feb_6.Rmd",
    "project_path" : "Chapter5_Feb_6/Chapter5_Feb_6.Rmd",
    "properties" : {
        "last_setup_crc32" : "",
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}